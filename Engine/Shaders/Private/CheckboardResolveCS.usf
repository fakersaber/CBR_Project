#include "/Engine/Private/Common.ush"

Texture2DMS<float4> DownSizedInColor2x0;
Texture2DMS<float4> DownSizedInColor2x1;
Texture2DMS<float> DownSizedInDepth2x0;
Texture2DMS<float> DownSizedInDepth2x1;
RWTexture2D<float4> OutColor;

#define Up		0
#define Down	1
#define Left	2
#define Right	3



float4 Resolve2xSampleTemporal(float FrameOffset, uint2 dispatchThreadId)
{
	const int2 qtr_res_pixel = floor(dispatchThreadId.xy * 0.5f);
	
	const int quadrant = int(dispatchThreadId.x & 0x1) + int(dispatchThreadId.y & 0x1) * 2;
	
	float4 Color = float4(0.f, 0.f, 0.f, 0.f);
	
	////并行加速
	Color = quadrant == 0 ? DownSizedInColor2x0.Load(qtr_res_pixel, 1) : Color;
	
	Color = quadrant == 1 ? DownSizedInColor2x1.Load(qtr_res_pixel + int2(1, 0), 1) : Color;
	
	Color = quadrant == 2 ? DownSizedInColor2x1.Load(qtr_res_pixel, 0) : Color;
	
	Color = quadrant == 3 ? DownSizedInColor2x0.Load(qtr_res_pixel, 0) : Color;
	
	float depth = 0.f;
	
	//depth = quadrant == 0 ? DownSizedInDepth2x0.Load(qtr_res_pixel, 1) : depth;
	
	//depth = quadrant == 1 ? DownSizedInDepth2x1.Load(qtr_res_pixel + int2(1, 0), 1) : depth;
	
	//depth = quadrant == 2 ? DownSizedInDepth2x1.Load(qtr_res_pixel, 0) : depth;
	
	//depth = quadrant == 3 ? DownSizedInDepth2x0.Load(qtr_res_pixel, 0) : depth;
	
	
	
	return Color;
}

[numthreads(CBR_GROUP_THREAD_COUNTS, CBR_GROUP_THREAD_COUNTS, 1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
	float4 Color = Resolve2xSampleTemporal(CBRColorBuffer.FrameOffset, DTid.xy);
	OutColor[DTid.xy] = float4(Color.xyz, 1.0f);
}

