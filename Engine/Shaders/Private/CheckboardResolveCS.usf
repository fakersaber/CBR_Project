#include "/Engine/Private/Common.ush"

Texture2DMS<float4> DownSizedInColor2x0;
Texture2DMS<float4> DownSizedInColor2x1;

Texture2DMS<float> DownSizedInDepth2x0;
Texture2DMS<float> DownSizedInDepth2x1;

RWTexture2D<float4> OutColor;

#define Up		0
#define Down	1
#define Left	2
#define Right	3


void getCardinalOffsets(int quadrant, out int2 offsets[4], out int quadrants[2])
{	
	quadrants[0] = 0;
	quadrants[1] = 0;
	
	quadrants[0] = quadrant == int(0) ? int(2) : quadrants[0];
	quadrants[1] = quadrant == int(0) ? int(1) : quadrants[1];
	
	quadrants[0] = quadrant == int(1) ? int(3) : quadrants[0];
	quadrants[1] = quadrant == int(1) ? int(0) : quadrants[1];
	
	quadrants[0] = quadrant == int(2) ? int(0) : quadrants[0];
	quadrants[1] = quadrant == int(2) ? int(3) : quadrants[1];
	
	quadrants[0] = quadrant == int(3) ? int(1) : quadrants[0];
	quadrants[1] = quadrant == int(3) ? int(2) : quadrants[1];
	
	
	offsets[Up] = int2(0, 0);
	offsets[Up] = quadrant == 0 ? -int2(0, -1) : offsets[Up];
	offsets[Up] = quadrant == 1 ? -int2(0, -1) : offsets[Up];

	offsets[Down] = int2(0, 0);
	offsets[Down] = quadrant == 2 ? int2(0, 1) : offsets[Down];
	offsets[Down] = quadrant == 3 ? int2(0, 1) : offsets[Down];
	
	offsets[Left] = int2(0, 0);
	offsets[Left] = quadrant == 0 ? -int2(-1, 0) : offsets[Left];
	offsets[Left] = quadrant == 2 ? -int2(-1, 0) : offsets[Left];

	offsets[Right] = int2(0, 0);
	offsets[Right] = quadrant == 1 ? int2(1, 0) : offsets[Right];
	offsets[Right] = quadrant == 3 ? int2(1, 0) : offsets[Right];
}


float4 readFromQuadrant(int2 pixel, int quadrant)
{
	float4 Color = float4(0.f,0.f,0.f,0.f);
	
	Color = quadrant == 0 ? DownSizedInColor2x0.Load(pixel, 1) : Color;
	
	Color = quadrant == 1 ? DownSizedInColor2x1.Load(pixel + int2(1, 0), 1) : Color;
	
	Color = quadrant == 2 ? DownSizedInColor2x1.Load(pixel, 0) : Color;
	
	Color = quadrant == 3 ? DownSizedInColor2x0.Load(pixel, 0) : Color;
	
	return Color;
}

float3 hdrColorBlend(float3 a, float3 b, float3 c, float3 d)
{
    // Reinhard 
	float3 t_a = a / (a + 1);
	float3 t_b = b / (b + 1);
	float3 t_c = c / (c + 1);
	float3 t_d = d / (d + 1);

	float3 color = (t_a + t_b + t_c + t_d) * float(0.25f);

    // back to hdr
	return -color / (color - 1);
}


float4 Resolve2xSampleTemporal(int FrameOffset, uint2 dispatchThreadId)
{
	const int quadrant = int(dispatchThreadId.y & 0x1) * 2 + int(dispatchThreadId.x & 0x1);
	const int2 qtr_res_pixel = floor(dispatchThreadId.xy * 0.5f);
	
	const int SampleIndex[4] = { 0, 1, 1, 0 };
	int2 cardinal_offsets[4];
	int cardinal_quadrants[2];
	
	float lerpScale = (SampleIndex[quadrant] == FrameOffset || CBRColorBuffer.MotionVector == 1) ? float(1.f) : float(0.f);
	
    float4 Color_0 = readFromQuadrant(qtr_res_pixel, quadrant) * lerpScale;
	
	getCardinalOffsets(quadrant, cardinal_offsets, cardinal_quadrants);
	float4 color[4];
	color[Up] = readFromQuadrant(qtr_res_pixel + cardinal_offsets[Up], cardinal_quadrants[0]);
	color[Down] = readFromQuadrant(qtr_res_pixel + cardinal_offsets[Down], cardinal_quadrants[0]);
	color[Left] = readFromQuadrant(qtr_res_pixel + cardinal_offsets[Left], cardinal_quadrants[1]);
	color[Right] = readFromQuadrant(qtr_res_pixel + cardinal_offsets[Right], cardinal_quadrants[1]);
	
	float4 Color_1 = float4(hdrColorBlend(color[Up].rgb, color[Down].rgb, color[Left].rgb, color[Right].rgb), 1);
	
	Color_1 = Color_1 - Color_1 * lerpScale;
	
	float4 Color = Color_0 + Color_1;
	
	return Color;
}

[numthreads(CBR_GROUP_THREAD_COUNTS, CBR_GROUP_THREAD_COUNTS, 1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
	float4 Color = Resolve2xSampleTemporal(CBRColorBuffer.FrameOffset, DTid.xy);
	OutColor[DTid.xy] = float4(Color.xyz, 1.0f);
}

